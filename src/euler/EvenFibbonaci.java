package euler;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

//Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//
//1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
//By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
public class EvenFibbonaci {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int t = in.nextInt();
        if (!(t >= 1 && t <= Math.pow(10, 5))) {
            return;
        }
        boolean flag = false;
        List<Integer> Nlist = new ArrayList<>();
        for(int a0 = 0; a0 < t; a0++){
            int n = in.nextInt();
            flag = ((n >= 1 && n <= Math.pow(10, 9)));
            if (flag) {
                Nlist.add(n);
            } else {
                break;
            }
        }
        if (flag) {
            printSolution(Nlist);
        }
    }

    private static void printSolution(List<Integer> nlist) {
        for (int n : nlist) {
            System.out.println(getSumOfEvenFibonacci(n));
        }
    }

    private static int getSumOfEvenFibonacci(int n) {
        int a = 1;
        int b = 2;
        int c;
        int sum = 2;
        while (a <= n && b <= n) {
            c = a + b;
            if (c < n && c % 2 == 0) {
                sum += c;
            }
            a = b;
            b = c;
        }
        return sum;
    }
}
